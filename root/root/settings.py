"""
Django settings for root project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import json
import datetime
import sys
import boto3


sys.path.insert(0, 'root')
# SECURITY WARNING: don't run with debug turned on in production!




#############

DEBUG = True


#############


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

CLIENT = 'aaane'

path_to_vars = os.path.join(BASE_DIR,'vars.json')
print(path_to_vars,"path")


with open(path_to_vars, 'r') as v:
    project_vars = json.loads(v.read())

if DEBUG:
    project_vars = project_vars[f'local_{CLIENT}']
    FRONT_END_DOMAIN = project_vars['front_end_domain']
    BACK_END_DOMAIN = project_vars['back_end_domain']

else:
    project_vars = project_vars[f'deploy_{CLIENT}']
    FRONT_END_DOMAIN = project_vars['front_end_domain']
    BACK_END_DOMAIN = project_vars['back_end_domain']



SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8up3@nf#g1w0wry%e1!4r-g@^i*_5#(or(y@fv7vp723qgx=2c'


HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}


ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'health_check',
    'haystack',
    'channels',
    'search',
    'corsheaders',
    'accounts',
    'rest_framework',
    'rest_framework.authtoken',
    'django_rest_passwordreset',
    'dashboard',
    'training',
    'arena',
    'onboarding',
    'messaging',
    'observations',
    'storages',
    'fcm_django',
    'homepage',
    # 'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'payments',
    'performance_points'
]

MIDDLEWARE = [
    'root.cors.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'accounts.middleware.UpdateLastActivityMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = project_vars['project_name'] + '.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'root.wsgi.application'

# TODO: SET THIS TO REGEX WHITELIST FOR WAGEUP AND LOCALHOST
# CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS = False


CSRF_TRUSTED_ORIGINS = ['http://localhost:8080',]
# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': project_vars['db_name'] + '_django',
        'USER': 'django',
        'PASSWORD': project_vars['db_password'],
        'HOST': 'wageup.celpdkh1ncgj.us-east-1.rds.amazonaws.com',
        'PORT': '3306',
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
    }
}

ADMINS = [('Devin', 'devin@wageup.com'), ('Morgan', 'morgan.hartley@thedgcgroup.com'), ('matt', "matthew.gorbett@wageup.com")]
AWS_SES_REGION_NAME = 'us-east-1'
AWS_SES_REGION_ENDPOINT = 'email.us-east-1.amazonaws.com'

AWS_ACCESS_KEY_ID = project_vars['aws_access_key_id']
AWS_SECRET_ACCESS_KEY = project_vars['aws_access_secret_id']

AWS_STORAGE_BUCKET_NAME = 'wageup-media'
AWS_QUERYSTRING_AUTH = False
AWS_DEFAULT_ACL = 'public-read'


EMAIL_BACKEND = 'django_ses.SESBackend'

LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/403/'
LOGIN_URL = '/'

DEFAULT_FROM_EMAIL = 'admin@wageup.com'
SERVER_EMAIL = 'admin@wageup.com'


#firebase

FCM_DJANGO_SETTINGS = {
        # authentication to Firebase
        "FCM_SERVER_KEY": "AAAA3TKiRoI:APA91bGk2lIzH2ZPYAKJU_OHzFfY39SGQ7bypLSQufDn1acohscPnZksmvv5SFaQLgFRloWNzB2_6zcglZt47Fg9Gmfsiiu_7Qx-hVKnPB5etl_h7X2XLtvof-uULPBrZHQHGWnjFMTj",
        # true if you want to have only one active device per registered user at a time
        # default: False
        "ONE_DEVICE_PER_USER": False,
        # devices to which notifications cannot be sent,
        # are deleted upon receiving error response from FCM
        # default: False
        "DELETE_INACTIVE_DEVICES": True,
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

# 6 characters password

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        },
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


##Logging
import logging

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

if not DEBUG:
    boto3_logs_client = boto3.client("logs",
                                     aws_access_key_id=AWS_ACCESS_KEY_ID,
                                     aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                                     region_name='us-east-1')

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'root': {
            'level': 'ERROR',
            # Adding the watchtower handler here causes all loggers in the project that
            # have propagate=True (the default) to send messages to watchtower. If you
            # wish to send only from specific loggers instead, remove "watchtower" here
            # and configure individual loggers below.
            'handlers': ['watchtower', 'console'],
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
            'watchtower': {
                'class': 'watchtower.CloudWatchLogHandler',
                'boto3_client': boto3_logs_client,
                'log_group_name': 'aaane_django',
                # Decrease the verbosity level here to send only those logs to watchtower,
                # but still see more verbose logs in the console. See the watchtower
                # documentation for other parameters that can be set here.
                'level': 'ERROR'
            }
        },
        'loggers': {
            # In the debug server (`manage.py runserver`), several Django system loggers cause
            # deadlocks when using threading in the logging handler, and are not supported by
            # watchtower. This limitation does not apply when running on production WSGI servers
            # (gunicorn, uwsgi, etc.), so we recommend that you set `propagate=True` below in your
            # production-specific Django settings file to receive Django system logs in CloudWatch.
            'django': {
                'level': 'ERROR',
                'handlers': ['console'],
                'propagate': True
            }
            # Add any other logger-specific configuration here.
        }
    }

# else:

    # LOGGING = {
    #     'version': 1,
    #     'disable_existing_loggers': False,
    #     'filters': {
    #         'require_debug_true': {
    #             '()': 'django.utils.log.RequireDebugTrue',
    #         }
    #     },
    #
    #     # 'formatters': {
    #     #     'verbose': {
    #     #         'format': '%(message)s'
    #     #     },
    #     # },
    #     'handlers': {
    #         'file': {
    #             'level': 'DEBUG',
    #             'class': 'logging.FileHandler',
    #             'filename': os.path.join(BASE_DIR, 'logs', 'debug.log'),
    #         },
    #     },
    #     'loggers': {
    #         'django.db.backends': {
    #             'level': 'DEBUG',
    #             'handlers': ['file'],
    #         },
    #     },
    #
    # }
###CACHE CONFIG
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://10.110.1.247:6380/',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }



### CHANNELS CONFIGURATION

ASGI_APPLICATION = project_vars['project_name'] + ".routing.application"
# ASGI_APPLICATION = "routing.application"

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('10.110.1.247', 6380)],
#         },
#     },
# }


## DJANGO REST CONFIG
AUTHENTICATION_BACKENDS = ('accounts.jwt_serializers.CustomAuthentication', 'django.contrib.auth.backends.ModelBackend',)

REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


### PASSWORD RESET AND ACCOUNT INVITE EMAIL EXPIRATION:

PASSWORD_RESET_TIMEOUT_DAYS = 6

DJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {
    "CLASS": "django_rest_passwordreset.tokens.RandomStringTokenGenerator",
    "OPTIONS": {
        "min_length": 6,
        "max_length": 6
    }
}



SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=60), #TODO: Change this to something lower
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(hours=8),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(hours=8),
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/



STATIC_ROOT=os.path.join(BASE_DIR, "static")
STATIC_URL='https://s3.amazonaws.com/wageup-static/root-static/'
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, "static"),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'https://s3.amazonaws.com/wageup-media/root-media/'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'



if DEBUG:


    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False


    # DATABASES = {
    #     'default': {
    #       'ENGINE': 'django.db.backends.mysql',
    #       'NAME': project_vars['db_name'] + '_django',
    #       'USER': 'django',
    #         'PASSWORD': project_vars['db_password'],
    #       'HOST': '127.0.0.1',
    #       'PORT': '3308',
    #     },
    # }



    DATABASES = {
        'default': {
          'ENGINE': 'django.db.backends.mysql',
        #   'NAME': project_vars['db_name'] + '_django',
          'NAME': 'aaane_django',
        #   'USER': 'django',
          'USER': 'db_processing',
          'PASSWORD': project_vars['db_password'],
          'HOST': '127.0.0.1',
        #   'HOST': 'localhost',
          'PORT': '3306',
        },
    }

    # CHANNEL_LAYERS = {
    #     'default': {
    #         'BACKEND': 'channels_redis.core.RedisChannelLayer',
    #         'CONFIG': {
    #             "hosts": [('127.0.0.1', 6379)],
    #             # "hosts": [('127.0.0.1', 6379)],
    #         },
    #     },
    # }

    # CACHES = {
    #     'default': {
    #         'BACKEND': 'django_redis.cache.RedisCache',
    #         'LOCATION': 'redis://127.0.0.1:6379/',
    #         'OPTIONS': {
    #             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
    #         }
    #     }
    # }
